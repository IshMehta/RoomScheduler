
import java.sql.Date;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;




/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ish
 */
public class MainPage extends javax.swing.JDialog {
    
    

    /**
     * Creates new form MainPage
     */
    public MainPage(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        rebuildFacultyComboBox();
        rebuildDateComboBox();
        buildWaitingList();
        rebuildRoomComboBox();
    }
    
    public void rebuildFacultyComboBox(){
        facultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
        cancelReservationFaculty.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
        facultyStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
    }
    
    public void rebuildDateComboBox(){
       
        dateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
        dateStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
        cancelReservationDate.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
    }
    
    public void rebuildRoomComboBox(){
        
        ArrayList<RoomEntry> roomList = RoomQueries.getAllPossibleRooms();
        ArrayList<String> roomNameList = new ArrayList<String>();
        for (RoomEntry entry: roomList){
            roomNameList.add(entry.getName());
        }
        roomComboBox.setModel(new javax.swing.DefaultComboBoxModel(roomNameList.toArray()));
    }
    
    public void buildWaitingList(){
        ArrayList<String> dates = Dates.getAllDates();
        ArrayList<WaitlistEntry> list = new ArrayList<WaitlistEntry>();
        String result = String.format("%s\t%s\t%15s\t%n%n", "Faculty",  "Date",  "Seats");
        for (String date : dates){
            list = WaitlistQueries.getWaitlistByDate(date);
            for (WaitlistEntry entry : list){
                result = String.format(result + "%s\t%s\t%15s\t%n",  entry.getName(), 
                    entry.getDate(),  entry.getSeats());
            }
        }
        displayWaitingList.setText(result);
    }
    
        
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addFacultyName = new javax.swing.JTextField();
        addFacultyNameButton = new javax.swing.JButton();
        addFacultyStatusLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        facultyComboBox = new javax.swing.JComboBox<>();
        dateComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        seatsRequired = new javax.swing.JTextField();
        submitReserveButton = new javax.swing.JButton();
        reserveRoomStatusLabel = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cancelReservationFaculty = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        cancelReservationDate = new javax.swing.JComboBox<>();
        cancelReservationButton = new javax.swing.JButton();
        cancelReservationStatus = new javax.swing.JLabel();
        waitlistUpdate = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        addRoomName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        addRoomSeats = new javax.swing.JTextField();
        addRoomButton = new javax.swing.JButton();
        addRoomStatusLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        waitlistUpdateStatus = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        roomComboBox = new javax.swing.JComboBox<>();
        dropRoomButton = new javax.swing.JButton();
        dropRoomStatus = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        waitlistAfterDropDisplay = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        reservationUpdate = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        dateSelector = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        addDateButton = new javax.swing.JButton();
        addDateStatusLabel = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        dateStatusComboBox = new javax.swing.JComboBox<>();
        statusByDateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayResults = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayWaitingList = new javax.swing.JTextArea();
        jPanel10 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        facultyStatusComboBox = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        reservationDisplay = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        waitlistDisplay = new javax.swing.JTextArea();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Room Scheduler");

        jLabel2.setText("Faculty Name:");

        addFacultyName.setColumns(20);
        addFacultyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyNameActionPerformed(evt);
            }
        });

        addFacultyNameButton.setText("Submit");
        addFacultyNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyNameButtonActionPerformed(evt);
            }
        });

        addFacultyStatusLabel.setText("  ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(addFacultyNameButton)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(addFacultyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(addFacultyStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(357, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addFacultyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addFacultyNameButton)
                .addGap(18, 18, 18)
                .addComponent(addFacultyStatusLabel)
                .addContainerGap(363, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Faculty", jPanel1);

        jLabel3.setText("Faculty:");

        jLabel4.setText("Date:");

        jLabel5.setText("Seats Required:");

        seatsRequired.setColumns(10);

        submitReserveButton.setText("Submit");
        submitReserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitReserveButtonActionPerformed(evt);
            }
        });

        reserveRoomStatusLabel.setText(" ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(submitReserveButton)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(55, 55, 55)
                                    .addComponent(facultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(seatsRequired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(reserveRoomStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(476, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(facultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(seatsRequired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitReserveButton)
                .addGap(18, 18, 18)
                .addComponent(reserveRoomStatusLabel)
                .addContainerGap(279, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reserve Room", jPanel2);

        jLabel10.setText("Faculty: ");

        cancelReservationFaculty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        jLabel11.setText("Date:");

        cancelReservationDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        cancelReservationButton.setText("Cancel");
        cancelReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReservationButtonActionPerformed(evt);
            }
        });

        cancelReservationStatus.setText("  ");

        waitlistUpdate.setText(" ");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cancelReservationStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel8Layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(75, 75, 75)
                                    .addComponent(cancelReservationFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel8Layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cancelReservationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(cancelReservationButton))))
                    .addComponent(waitlistUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(500, 500, 500))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cancelReservationFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cancelReservationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cancelReservationButton)
                .addGap(18, 18, 18)
                .addComponent(cancelReservationStatus)
                .addGap(18, 18, 18)
                .addComponent(waitlistUpdate)
                .addContainerGap(277, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cancel Reservation", jPanel8);

        jLabel7.setText("Room Name:");

        addRoomName.setColumns(20);
        addRoomName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomNameActionPerformed(evt);
            }
        });

        jLabel8.setText("Seats:");

        addRoomSeats.setColumns(20);
        addRoomSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomSeatsActionPerformed(evt);
            }
        });

        addRoomButton.setText("Add");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        addRoomStatusLabel.setText(" ");

        waitlistUpdateStatus.setEditable(false);
        waitlistUpdateStatus.setColumns(20);
        waitlistUpdateStatus.setRows(5);
        jScrollPane3.setViewportView(waitlistUpdateStatus);

        jLabel17.setText("Waitlist Update Status:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addRoomButton)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(48, 48, 48)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addRoomSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(addRoomStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel17))
                .addContainerGap(254, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(addRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(addRoomSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addRoomButton)
                .addGap(18, 18, 18)
                .addComponent(addRoomStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add Room", jPanel5);

        jLabel15.setText("Rooms:");

        roomComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        dropRoomButton.setText("Drop");
        dropRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomButtonActionPerformed(evt);
            }
        });

        dropRoomStatus.setText("  ");

        waitlistAfterDropDisplay.setEditable(false);
        waitlistAfterDropDisplay.setColumns(20);
        waitlistAfterDropDisplay.setRows(5);
        jScrollPane6.setViewportView(waitlistAfterDropDisplay);

        jLabel16.setText("The following have been added to the waitlist: ");

        reservationUpdate.setText(" ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(dropRoomButton)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addGap(68, 68, 68)
                            .addComponent(roomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(dropRoomStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                    .addComponent(reservationUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(345, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(roomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(dropRoomButton)
                .addGap(18, 18, 18)
                .addComponent(dropRoomStatus)
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reservationUpdate)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Drop Room", jPanel3);

        dateSelector.setModel(new javax.swing.SpinnerDateModel());

        jLabel9.setText("Choose Date: ");

        addDateButton.setText("Add Date");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        addDateStatusLabel.setText(" ");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(addDateButton)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(18, 18, 18)
                            .addComponent(dateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(addDateStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(449, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(dateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addDateButton)
                .addGap(18, 18, 18)
                .addComponent(addDateStatusLabel)
                .addContainerGap(357, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Date", jPanel6);

        jLabel6.setText("Date:");

        statusByDateButton.setText("Search");
        statusByDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusByDateButtonActionPerformed(evt);
            }
        });

        displayResults.setEditable(false);
        displayResults.setColumns(20);
        displayResults.setRows(5);
        jScrollPane1.setViewportView(displayResults);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 356, Short.MAX_VALUE)
                        .addComponent(dateStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(statusByDateButton)
                        .addGap(92, 92, 92))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dateStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusByDateButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Status By Date", jPanel7);

        displayWaitingList.setEditable(false);
        displayWaitingList.setColumns(20);
        displayWaitingList.setRows(5);
        jScrollPane2.setViewportView(displayWaitingList);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab(" Waiting List", jPanel9);

        jLabel12.setText("Faculty:");

        jLabel13.setText("Reservations List");

        reservationDisplay.setEditable(false);
        reservationDisplay.setColumns(20);
        reservationDisplay.setRows(5);
        jScrollPane4.setViewportView(reservationDisplay);

        jLabel14.setText("Waitlist List");

        waitlistDisplay.setEditable(false);
        waitlistDisplay.setColumns(20);
        waitlistDisplay.setRows(5);
        jScrollPane5.setViewportView(waitlistDisplay);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(70, 70, 70)
                        .addComponent(facultyStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                    .addComponent(jScrollPane5))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(facultyStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Status By Faculty", jPanel10);

        jTabbedPane1.addTab("Status", jTabbedPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 741, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(247, 247, 247))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFacultyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addFacultyNameActionPerformed

    private void addFacultyNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyNameButtonActionPerformed
        // TODO add your handling code here:
        //clear prev labels
        addFacultyStatusLabel.setText("");
        
        String name = addFacultyName.getText();
        Faculty.addNewFaculty(name);
        addFacultyStatusLabel.setText(name+" has been added to the database.");
        rebuildFacultyComboBox();
    }//GEN-LAST:event_addFacultyNameButtonActionPerformed

    private void submitReserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitReserveButtonActionPerformed
        // TODO add your handling code here:
        
        //clear prev labels
        reserveRoomStatusLabel.setText("");
        
        String facultySelected = (String)facultyComboBox.getSelectedItem();
        String dateSelected = (String)dateComboBox.getSelectedItem();
        int seats = Integer.parseInt(seatsRequired.getText());
        
        ArrayList<String> roomsReserved = ReservationQueries.getRoomsReservedByDate(dateSelected);
        ArrayList<RoomEntry> allRooms = RoomQueries.getAllPossibleRooms();
        ArrayList<RoomEntry> freeRooms = new ArrayList<RoomEntry>();
        
        RoomEntry freeRoomQuery = new RoomEntry("NA", 0);
        int minDifference = 0;
        boolean setMinSeats = false;
        boolean foundRoom = false;
      
        for(RoomEntry room: allRooms){
            boolean roomFree = true;
            for (String reservedRoom : roomsReserved){
                if (room.getName().equals(reservedRoom)){
                    roomFree = false;
                }
            }
            if(roomFree){
                if(!setMinSeats){
                    minDifference = room.getSeats()-seats;
                    setMinSeats = true;
                }
                freeRooms.add(room);
                if(room.getSeats()>= seats){
                    if ( (room.getSeats()-seats) <= minDifference){
                        minDifference = room.getSeats()-seats;
                        freeRoomQuery = new RoomEntry(room.getName(), room.getSeats());
                        foundRoom = true;
                    }
                }
            }
        }
        
        Timestamp timestamp = new Timestamp(Calendar.getInstance().getTime().getTime());
        if(foundRoom){
            ReservationQueries.addReservsationEntry(new ReservationEntry(facultySelected, freeRoomQuery.getName(), dateSelected, seats , timestamp));
            reserveRoomStatusLabel.setText("Room found. " + freeRoomQuery.getName() + " has been reserved.");
        } else {
            WaitlistQueries.addWaitlistEntry(new WaitlistEntry(facultySelected, dateSelected, seats, timestamp));
            reserveRoomStatusLabel.setText("No room found. " + facultySelected + " has been added to the waitlist.");
        }
        
        buildWaitingList();
    }//GEN-LAST:event_submitReserveButtonActionPerformed

    private void statusByDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusByDateButtonActionPerformed
        // TODO add your handling code here:
        String dateSelected = (String)dateStatusComboBox.getSelectedItem();
        ArrayList<ReservationEntry> list = ReservationQueries.getReservationsByDate(dateSelected);
        String result= String.format("%s\t%s\t%s\t%15s\t%n%n", "Faculty",  "Room", "Date",  "Seats");
        
        for (ReservationEntry entry : list ){
            result = String.format(result + "%s\t%s\t%s\t%15s\t%n",  entry.getName(), entry.getRoom(), 
                    entry.getDate(),  entry.getSeats());
        }
        
        
        displayResults.setText(result);
    }//GEN-LAST:event_statusByDateButtonActionPerformed

    private void addRoomNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addRoomNameActionPerformed

    private void addRoomSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addRoomSeatsActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // TODO add your handling code here:
        String waitlistUpdates= "Following list of faculty have been removed from waitlist:" +
                        String.format("%n%s\t%s\t%s\t%15s\t%n%n", "Faculty",  "Room", "Date",  "Seats");
        
        //clear prev status labels
        waitlistUpdateStatus.setText("");
        addRoomStatusLabel.setText("");
        
        RoomQueries.addRoom(new RoomEntry(addRoomName.getText(), Integer.parseInt(addRoomSeats.getText())));
        addRoomStatusLabel.setText(addRoomName.getText() + " has been added to the database.");
        ArrayList<String> dateList = Dates.getAllDates();
        ArrayList<WaitlistEntry> list = new ArrayList<WaitlistEntry>();
        
        
        for (String date : dateList){
            boolean newEntry = false;
            list = WaitlistQueries.getWaitlistByDate(date);
            if(list.size()!=0){
                for(WaitlistEntry entry : list){
                    if(!newEntry){
                        if (Integer.parseInt(addRoomSeats.getText())>= entry.getSeats()){
                            newEntry = true;
                            ReservationQueries.addReservsationEntry(new ReservationEntry(entry.getName(), addRoomName.getText(),
                            entry.getDate(), entry.getSeats(), entry.getTimestamp()));
                            WaitlistQueries.deleteWaitlistEntry(entry.getName(), entry.getDate());
                            waitlistUpdates = waitlistUpdates + String.format("%s\t%s\t%s\t%15s\t%n%n", entry.getName(), addRoomName.getText(),
                                    entry.getDate(), entry.getSeats());
                            buildWaitingList();
                            waitlistUpdateStatus.setText(waitlistUpdates);
                        }
                    }
                }
            }
        }
        rebuildRoomComboBox();
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        // TODO add your handling code here:
        addDateStatusLabel.setText("");
        
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd"); 
        String spinnerValue = formater.format(dateSelector.getValue());
        Date day = Date.valueOf(spinnerValue);
        Dates.addDate(day);
        addDateStatusLabel.setText("Date added.");
        rebuildDateComboBox();
        
    }//GEN-LAST:event_addDateButtonActionPerformed

    private void cancelReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReservationButtonActionPerformed
        // TODO add your handling code here:
        String facultySelected = (String)cancelReservationFaculty.getSelectedItem();
        String dateSelected = (String)cancelReservationDate.getSelectedItem();
        
        cancelReservationStatus.setText("");
        waitlistUpdate.setText("");
        
        ReservationQueries.deleteReservation(dateSelected, facultySelected);
        WaitlistQueries.deleteWaitlistEntry(facultySelected, dateSelected);
        cancelReservationStatus.setText(String.format("%s reservation has been cancelled.", facultySelected));
        
        ArrayList<WaitlistEntry> list = WaitlistQueries.getWaitlistByDate(dateSelected);
        
        
        if (list.size()!=0){
            ArrayList<RoomEntry> allRooms = RoomQueries.getAllPossibleRooms();
            ArrayList<String> reservations = ReservationQueries.getRoomsReservedByDate(dateSelected);
            ArrayList<RoomEntry> freeRooms = new ArrayList<RoomEntry>();
            
            boolean roomFree = false;
            boolean setMinSeats = false;
            int minSeats= 0;
            
            
            for (RoomEntry room : allRooms ){
                boolean roomCheck = true;
                for (String reservedRoom : reservations){
                    if(room.getName().equals(reservedRoom)){
                        roomCheck = false;
                    }
                }
                if(roomCheck){
                    freeRooms.add(room);
                    roomFree = true;
                }
            }
            
            boolean roomFound = false;
            WaitlistEntry toBeReserved = new WaitlistEntry();
            RoomEntry roomToBeReserved = new RoomEntry("NA", 0);
            if (roomFree){
                for (WaitlistEntry entry : list){
                    if(!roomFound){
                        for (RoomEntry availableRoom: freeRooms){
                            if (availableRoom.getSeats()>= entry.getSeats()){
                                if (!setMinSeats){
                                    minSeats = availableRoom.getSeats() - entry.getSeats();
                                    toBeReserved = entry;
                                    roomToBeReserved = availableRoom;
                                    roomFound = true;
                                } else if ( (availableRoom.getSeats() - entry.getSeats()) < minSeats) {
                                    minSeats = availableRoom.getSeats() - entry.getSeats();
                                    toBeReserved = entry;
                                    roomToBeReserved = availableRoom;
                                    roomFound = true;
                                }
                            }
                        }
                    }
                }
                
                if(roomFound){
                ReservationQueries.addReservsationEntry(new ReservationEntry(toBeReserved.getName(), roomToBeReserved.getName(), 
                        toBeReserved.getDate(), toBeReserved.getSeats(), toBeReserved.getTimestamp()));
                WaitlistQueries.deleteWaitlistEntry(toBeReserved.getName(), toBeReserved.getDate());
                waitlistUpdate.setText(toBeReserved.getName() + " has been removed from waitlist and assigned to " + roomToBeReserved.getName());
                }
            }
               
        }
        buildWaitingList();
        
    }//GEN-LAST:event_cancelReservationButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        
        
        String reservationResult = String.format("%n%s\t%s\t%s\t%15s\t%n%n", "Faculty",  "Room", "Date",  "Seats");
        String waitlistResult = String.format("%n%s\t%s\t%15s\t%n%n", "Faculty", "Date",  "Seats");
        
        String facultySelected = (String)facultyStatusComboBox.getSelectedItem();
        
        ArrayList<ReservationEntry> reservationList = ReservationQueries.getReservationsByFaculty(facultySelected);
        for (ReservationEntry entry : reservationList){
            reservationResult = reservationResult + 
                    String.format("%s\t%s\t%s\t%15s\t%n%n", entry.getName(), entry.getRoom(), entry.getDate(), entry.getSeats());
        }
        
        
        ArrayList<WaitlistEntry> waitlist = WaitlistQueries.getWaitlistByFaculty(facultySelected);
        for (WaitlistEntry entry : waitlist){
            waitlistResult = waitlistResult + 
                    String.format("%s\t%s\t%15s\t%n%n", entry.getName(),  entry.getDate(), entry.getSeats());
        }

        reservationDisplay.setText(reservationResult);
        waitlistDisplay.setText(waitlistResult);
        
    }//GEN-LAST:event_searchButtonActionPerformed

    private void dropRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRoomButtonActionPerformed
        // TODO add your handling code here:
        dropRoomStatus.setText("");
        waitlistAfterDropDisplay.setText("");
        
        String roomSelected = (String)roomComboBox.getSelectedItem();
        String result = String.format("%n%s\t%s\t%15s\t%n%n", "Faculty", "Date",  "Seats") ;
        
        ArrayList<String> dateList = Dates.getAllDates();
        ArrayList<ReservationEntry> reservation = new ArrayList<ReservationEntry>();
        ArrayList<ReservationEntry> toBeRemoved = new ArrayList<ReservationEntry>();
        
        for (String date : dateList){
            reservation = ReservationQueries.getReservationsByDate(date);
            for (ReservationEntry entry: reservation){
                if (entry.getRoom().equals(roomSelected)){
                    toBeRemoved.add(entry);
                }
            }
        }
        
        for (ReservationEntry entry : toBeRemoved){
            WaitlistQueries.addWaitlistEntry(new WaitlistEntry(entry.getName(), entry.getDate(), entry.getSeats(), 
                            entry.getTimestamp()));
                    ReservationQueries.deleteReservation(entry.getDate(), entry.getName());
                    result = result + String.format("%n%s\t%s\t%15s\t%n%n", entry.getName(), entry.getDate(), entry.getSeats());
        }
        
        

        RoomQueries.dropRoom(roomSelected);
        
        
        for(String date : dateList){
            ArrayList<WaitlistEntry> list = WaitlistQueries.getWaitlistByDate(date);
        
        
        if (list.size()!=0){
            ArrayList<RoomEntry> allRooms = RoomQueries.getAllPossibleRooms();
            ArrayList<String> reservations = ReservationQueries.getRoomsReservedByDate(date);
            ArrayList<RoomEntry> freeRooms = new ArrayList<RoomEntry>();
            
            boolean roomFree = false;
            boolean setMinSeats = false;
            int minSeats= 0;
            
            
            for (RoomEntry room : allRooms ){
                boolean roomCheck = true;
                for (String reservedRoom : reservations){
                    if(room.getName().equals(reservedRoom)){
                        roomCheck = false;
                    }
                }
                if(roomCheck){
                    freeRooms.add(room);
                    roomFree = true;
                }
            }
            
            boolean roomFound = false;
            WaitlistEntry toBeReserved = new WaitlistEntry();
            RoomEntry roomToBeReserved = new RoomEntry("NA", 0);
            if (roomFree){
                for (WaitlistEntry entry : list){
                    if(!roomFound){
                        for (RoomEntry availableRoom: freeRooms){
                            if (availableRoom.getSeats()>= entry.getSeats()){
                                if (!setMinSeats){
                                    minSeats = availableRoom.getSeats() - entry.getSeats();
                                    toBeReserved = entry;
                                    roomToBeReserved = availableRoom;
                                    roomFound = true;
                                } else if ( (availableRoom.getSeats() - entry.getSeats()) < minSeats) {
                                    minSeats = availableRoom.getSeats() - entry.getSeats();
                                    toBeReserved = entry;
                                    roomToBeReserved = availableRoom;
                                    roomFound = true;
                                }
                            }
                        }
                    }
                }
                
                if(roomFound){
                ReservationQueries.addReservsationEntry(new ReservationEntry(toBeReserved.getName(), roomToBeReserved.getName(), 
                        toBeReserved.getDate(), toBeReserved.getSeats(), toBeReserved.getTimestamp()));
                WaitlistQueries.deleteWaitlistEntry(toBeReserved.getName(), toBeReserved.getDate());
                reservationUpdate.setText(toBeReserved.getName() + " has been removed from waitlist and assigned to " + roomToBeReserved.getName());
                }
            }
               
        }
        }
        
        
        dropRoomStatus.setText(roomSelected + " has been removed from the database.");
        waitlistAfterDropDisplay.setText(result);
        rebuildRoomComboBox();
        buildWaitingList();
        
        
    }//GEN-LAST:event_dropRoomButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainPage dialog = new MainPage(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDateButton;
    private javax.swing.JLabel addDateStatusLabel;
    private javax.swing.JTextField addFacultyName;
    private javax.swing.JButton addFacultyNameButton;
    private javax.swing.JLabel addFacultyStatusLabel;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JTextField addRoomName;
    private javax.swing.JTextField addRoomSeats;
    private javax.swing.JLabel addRoomStatusLabel;
    private javax.swing.JButton cancelReservationButton;
    private javax.swing.JComboBox<String> cancelReservationDate;
    private javax.swing.JComboBox<String> cancelReservationFaculty;
    private javax.swing.JLabel cancelReservationStatus;
    private javax.swing.JComboBox<String> dateComboBox;
    private javax.swing.JSpinner dateSelector;
    private javax.swing.JComboBox<String> dateStatusComboBox;
    private javax.swing.JTextArea displayResults;
    private javax.swing.JTextArea displayWaitingList;
    private javax.swing.JButton dropRoomButton;
    private javax.swing.JLabel dropRoomStatus;
    private javax.swing.JComboBox<String> facultyComboBox;
    private javax.swing.JComboBox<String> facultyStatusComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea reservationDisplay;
    private javax.swing.JLabel reservationUpdate;
    private javax.swing.JLabel reserveRoomStatusLabel;
    private javax.swing.JComboBox<String> roomComboBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField seatsRequired;
    private javax.swing.JButton statusByDateButton;
    private javax.swing.JButton submitReserveButton;
    private javax.swing.JTextArea waitlistAfterDropDisplay;
    private javax.swing.JTextArea waitlistDisplay;
    private javax.swing.JLabel waitlistUpdate;
    private javax.swing.JTextArea waitlistUpdateStatus;
    // End of variables declaration//GEN-END:variables
}
